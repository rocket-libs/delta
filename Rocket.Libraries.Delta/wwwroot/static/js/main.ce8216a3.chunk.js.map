{"version":3,"sources":["BasicRouter/BasicRouter.tsx","BasicRouter/BasicRouterFunctions.ts","reportWebVitals.ts","Settings/Settings.ts","Api/ApiCaller.ts","Api/WrappedResponseApiCaller.ts","Api/ApiIntergratorBase.ts","GlobalConstants/GlobalConstants.ts","Forms/DataList/DataboundList/Databinder.ts","Api/StandardApiIntergrator.ts","ProjectDefinitionsList/Data/ProjectDefinitionsListApiIntegrator.ts","ProjectRunning/Data/ProjectDefinitionRunnerApiIntegrator.ts","ProjectDefinitionsList/Potter/ProjectDefinitionsListLogic.ts","ProjectDefinitionsList/Potter/ProjectDefinitionsListRepository.ts","ProjectDefinitionsList/UI/ProjectDefinitionsTable.tsx","Busy/BusyDialog.tsx","PageHeader/UI/PageHeader.tsx","ProjectDefinitionsList/UI/ProjectDefinitionsList.tsx","BasicRouter/BasicRouterDataReader.ts","EventStreaming/ServerEventListener.ts","Project/Potter/ProjectLogic.ts","Project/Potter/ProjectRepository.ts","Layout/Page.tsx","Project/UI/Project.tsx","Strings/StringsBase.ts","Landing/Data/LandingStrings.ts","Landing/LandingLogic.ts","Landing/UI/Landing.tsx","Navigation/UI/NavigationSupport.tsx","Forms/InputField.tsx","Forms/Dropdown/DefaultDropdownAdapter.ts","Forms/Dropdown/Dropdown.tsx","Forms/Dropdown/ReactSelect/ReactSelectDropDownAdapter.ts","Forms/GundiForm.tsx","Forms/ErrorDisplayer.tsx","Forms/Textbox.tsx","ApplicationForm/Data/ApplicationFormRepository.ts","ApplicationForm/Data/ApplicationFormStrings.ts","ApplicationForm/ApplicationFormLogic.ts","ApplicationForm/UI/ApplicationForm.tsx","AsyncRunner/AsyncRunner.ts","Project/Data/ProjectApiIntergrator.ts","ProjectDefinitions/Data/ProjectDefinitionRepository.ts","ProjectDefinitions/ProjectDefinitionsLogic.ts","ProjectDefinitions/UI/ProjectDefinition.tsx","ManageProject/Data/ManageProjectApiCaller.ts","ManageProject/State/ManageProjectLogic.ts","Forms/MultilineTextbox.tsx","ManageProject/UI/ManageProjectForm.tsx","index.tsx"],"names":["pathSetterInstance","BasicRouter","props","useState","path","navigationInfo","setNavigationInfo","activeNavigationInformation","setActiveNavigationInformation","pathSetter","window","location","pathname","useEffect","basicRouter","push","navigationInformation","toLocaleLowerCase","addEventListener","_","console","error","removeEventListener","history","pushState","data","targetComponent","routes","find","candidateRoute","component","badRouteComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Settings","includes","hostname","fullEndpointUri","relativeUrl","settings","encodeURI","host","ApiCaller","this","callAsync","payload","method","fullUrl","controller","AbortController","options","signal","headers","Accept","body","JSON","stringify","undefined","setTimeout","abort","fetch","response","ok","Error","status","statusText","WrappedResponseApiCaller","apiCaller","getAsync","extractPayloadAsync","postAsync","successCode","json","responseObject","code","message","ApiIntergratorBase","apiVersion","action","basePath","wrappedResponseApiCaller","getRelativeUrl","GlobalConstants","zero","one","negativeOne","strings","firstElementIndex","arrays","emptyArrayLength","paging","nextIncrementAmount","lastDecrementAmount","zIndexes","actionBar","menuDropDown","mobileTopBar","defaultGuid","Databinder","dataset","pageableEndpoint","currentPage","pageSize","maximumPageSize","hasMorePages","page","searchEndpoint","applyPagingToSearches","debouncingSearcher","searchDebounceMilliseconds","searchText","debounce","getSearchText","onSearchAsync","onGetPage","onCompleted","a","replaceData","newData","splice","length","i","Array","isArray","StandardApiIntergrator","pagesNavigator","getOptionallyPaged","dataAdapter","endpoint","result","appendData","model","ProjectDefinitionsListApiIntegrator","ProjectDefinitionRunnerApiIntegrator","projectId","ProjectDefinitionsListLogic","runAsync","fn","context","repository","hasFetchedProjectDefinitions","fetchProjectDefinitionsAsync","projectDefinitions","potter","pushToRepository","hasBranchless","repositoryDetail","branch","candidateBranch","toTitleCase","indexOf","sort","b","toLowerCase","branchlessLabel","args","filter","projectDefinition","str","firstChar","charAt","toUpperCase","rest","substring","runByIdAsync","PotterLogicBase","ProjectDefinitionsListRepository","startingUpText","PotterRepositoryBase","styles","container","margin","ProjectDefinitionsTable","style","Tabs","id","className","logic","tabs","map","label","tableProjects","getProjectsByBranch","count","Tab","eventKey","title","table","Table","striped","bordered","hover","size","responsive","index","ButtonGroup","Button","onClick","variant","PotterChildComponent","BusyDialog","Modal","show","ProgressBar","animated","now","PageHeader","document","PureComponent","ProjectDefinitionsList","componentToShow","getChildKeyFromObject","width","border","textAlign","paddingTop","onHide","Body","Footer","busy","PotterComponent","GetRouteData","state","ServerEventListener","eventSource","EventSource","url","onmessage","event","close","onData","ProjectLogic","isRunning","handleEventListening","processRunningResult","errors","output","outputDiv","getElementById","scrollIntoView","behavior","block","inline","scrollToBottom","ProjectRepository","Page","children","header","fontSize","fontWeight","Project","runProjectAsync","padding","chunk","split","line","StringsBase","applicationName","save","LandingStrings","addNewApplication","LandingLogic","ModuleStateManager","Landing","NavigationSupport","InputField","displayLabel","DefaultDropdownAdapter","newValue","dropdownValue","Dropdown","dropDownValues","adapter","closeMenuOnSelect","x","adaptSingleToDropdownValue","onChange","onSelectionChanged","userData","ReactSelectDropDownAdapter","labelKey","isMulti","extractSingleDataFromDropdownValue","value","getLabel","selectedData","labelProperty","Reflect","getOwnPropertyDescriptor","labelValue","toString","form","buttonsContainer","GundiForm","buttons","description","errorText","color","ErrorDisplayer","validationErrors","firstError","key","Textbox","Form","Group","controlId","Label","Control","type","placeholder","e","target","Text","ApplicationFormRepository","applicationProjectDefinitions","ApplicationFormStrings","name","projects","ApplicationFormLogic","updateModel","tag","localeCompare","updateRepository","application","Promise","resolve","ApplicationForm","setRerender","forceUpdate","saveApplicationAsync","saveButton","setApplicationDisplayLabel","selected","onProjectSelectionChanged","AsyncRunner","runStateWriter","ProjectApiIntergrator","ProjectDefinitionRepository","savedModel","ProjectDefinitionsLogic","asyncRunner","running","getByIdAsync","project","updateAsync","ProjectDefinition","initializeAsync","publishUrl","buildOutputDirectory","marginTop","projectConfigurations","Check","checked","keepSource","submitAsync","disabled","modelChanged","ManageProjectApiCaller","ManageProjectLogic","buildStages","saveAsync","saveResult","inError","isInitialized","disabledStages","buildCommands","onFailurePostBuildCommands","onSuccessPostBuildCommands","MultilineTextbox","rows","ManageProjectForm","initializeModel","join","buildCommand","command","projectLabel","canSave","toast","promise","pending","success","projectPath","buildSection","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ce8216a3.chunk.js","sourcesContent":["import { ReactElement, useEffect, useState } from \"react\";\nimport BasicRouterFunctions from \"./BasicRouterFunctions\";\nimport INavigationInformation from \"./INavigationInformation\";\nimport IRoute from \"./IRoute\";\n\ninterface IProps {\n  routes: IRoute[];\n  badRouteComponent: ReactElement;\n}\n\nlet pathSetterInstance: () => void;\n\ndeclare global {\n  interface Window {\n    basicRouter: BasicRouterFunctions;\n  }\n}\n\nwindow.basicRouter = window.basicRouter || new BasicRouterFunctions();\n\nexport default function BasicRouter(props: IProps): ReactElement {\n  const [navigationInfo, setNavigationInfo] = useState<INavigationInformation>({\n    path: \"/\",\n  });\n\n  const [activeNavigationInformation, setActiveNavigationInformation] =\n    useState<INavigationInformation>();\n\n  const pathSetter = () => {\n    setNavigationInfo({\n      path: window.location.pathname,\n    });\n  };\n\n  useEffect(() => {\n    window.basicRouter.push = (\n      navigationInformation: INavigationInformation\n    ) => {\n      navigationInformation.path =\n        navigationInformation.path.toLocaleLowerCase();\n      setNavigationInfo(navigationInformation);\n    };\n    pathSetterInstance = pathSetter;\n    window.addEventListener(\"popstate\", pathSetterInstance);\n\n    return function () {\n      window.basicRouter.push = (_) => {\n        console.error(\"BasicRouter push was disposed\");\n      };\n      window.removeEventListener(\"popstate\", pathSetterInstance);\n    };\n  });\n  useEffect(() => {\n    window.history.pushState(navigationInfo.data, \"\", navigationInfo.path);\n    setActiveNavigationInformation(navigationInfo);\n  }, [navigationInfo.path, navigationInfo.data, navigationInfo]);\n\n  const targetComponent = props.routes.find(\n    (candidateRoute) =>\n      candidateRoute.path.toLocaleLowerCase() === navigationInfo.path\n  ) ?? { path: \"/404\", component: props.badRouteComponent };\n\n  const readyToRender = activeNavigationInformation === navigationInfo;\n  if (readyToRender) {\n    return (\n      <div key={activeNavigationInformation?.path}>\n        {targetComponent.component}\n      </div>\n    );\n  } else {\n    return <>...</>;\n  }\n}\n","import INavigationInformation from \"./INavigationInformation\";\nexport default class BasicRouterFunctions {\n  public push: (navigationInformation: INavigationInformation) => void = (_) =>\n    console.error(\"Push not yet initialized\");\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nexport default class Settings {\n  \n  get host(): string{\n    const localhosts = ['localhost', '127.0.0.1'];\n    if(!localhosts.includes(window.location.hostname.toLocaleLowerCase())){\n      return \"\";\n    }else{\n      return \"http://localhost:5002/\" \n    }\n    \n  }\n}\n","import Settings from \"../Settings/Settings\";\n\nconst apiTimeoutMilliseconds = 1000 * 60 * 5;\n\nexport const fullEndpointUri = (relativeUrl: string): string => {\n  const settings = new Settings();\n  return encodeURI(`${settings.host}api/${relativeUrl}`);\n};\n\nexport default class ApiCaller {\n  public async getAsync(relativeUrl: string): Promise<Response> {\n    return await this.callAsync(relativeUrl, \"GET\");\n  }\n\n  public async postAsync(\n    relativeUrl: string,\n    payload: object\n  ): Promise<Response> {\n    return await this.callAsync(relativeUrl, \"POST\", payload);\n  }\n  private async callAsync(\n    relativeUrl: string,\n    method: string,\n    payload?: object\n  ): Promise<Response> {\n    const fullUrl = fullEndpointUri(relativeUrl);\n    const controller = new AbortController();\n\n    const options = {\n      method: method,\n      signal: controller.signal,\n      headers: {\n        Accept: \"application/json\",\n        \"Accept-Encoding\": \"gzip\",\n        \"Content-Type\": \"application/json;charset=UTF-8\",\n      },\n      body: payload ? JSON.stringify(payload) : undefined,\n    };\n\n    setTimeout(() => controller.abort(), apiTimeoutMilliseconds);\n    const response = await fetch(fullUrl, options);\n    if (response.ok) {\n      return response;\n    } else {\n      throw new Error(\n        `Error calling api '${fullUrl}'\\n HTTP Status Code: '${response.status}' Status Text '${response.statusText}'`\n      );\n    }\n  }\n}\n","import IWrappedResponse from \"./IWrappedResponse\";\nimport ApiCaller from \"./ApiCaller\";\n\nexport default class WrappedResponseApiCaller {\n  public async getAsync<TPayload>(relativeUrl: string): Promise<TPayload> {\n    const apiCaller = new ApiCaller();\n    const response = await apiCaller.getAsync(relativeUrl);\n    return await this.extractPayloadAsync(response);\n  }\n\n  public async postAsync<TPayload>(\n    relativeUrl: string,\n    payload: object\n  ): Promise<TPayload> {\n    const apiCaller = new ApiCaller();\n    const response = await apiCaller.postAsync(relativeUrl, payload);\n    return await this.extractPayloadAsync(response);\n  }\n\n  private async extractPayloadAsync<TPayload>(\n    response: Response\n  ): Promise<TPayload> {\n    const successCode = 1;\n    const responseObject =\n      (await response.json()) as IWrappedResponse<TPayload>;\n    if (responseObject.code === successCode) {\n      return responseObject.payload;\n    } else {\n      throw new Error(\"API call error: \" + responseObject.message);\n    }\n  }\n}\n","import WrappedResponseApiCaller from \"./WrappedResponseApiCaller\";\n\nexport default abstract class ApiIntergratorBase {\n  protected apiVersion: \"v0\" | \"v1\" = \"v1\";\n\n  protected get wrappedResponseApiCaller(): WrappedResponseApiCaller {\n    return new WrappedResponseApiCaller();\n  }\n\n  protected abstract get basePath(): string;\n\n  private getRelativeUrl(action: string): string {\n    return `${this.apiVersion}/${this.basePath}/${action}`;\n  }\n\n  protected async getAsync<TResult>(action: string): Promise<TResult> {\n    return await this.wrappedResponseApiCaller.getAsync<TResult>(\n      this.getRelativeUrl(action)\n    );\n  }\n\n  protected async postAsync<TResult>(\n    action: string,\n    payload: any\n  ): Promise<TResult> {\n    return await this.wrappedResponseApiCaller.postAsync(\n      this.getRelativeUrl(action),\n      payload\n    );\n  }\n}\n","const GlobalConstants = {\n    zero: 0,\n    one: 1,\n    negativeOne: -1,\n    strings: {\n        firstElementIndex: 0,\n    },\n    arrays: {\n        emptyArrayLength: 0,\n        firstElementIndex: 0,\n    },\n    paging: {\n        nextIncrementAmount: 1,\n        lastDecrementAmount: -1,\n    },\n    zIndexes: {\n        actionBar: 2,\n        menuDropDown: () => GlobalConstants.zIndexes.actionBar + GlobalConstants.one,\n        mobileTopBar: () => GlobalConstants.zIndexes.menuDropDown() + GlobalConstants.one,\n    },\n    defaultGuid: \"00000000-0000-0000-0000-000000000000\",\n};\n\nexport default GlobalConstants;\n","import GlobalConstants from \"../../../GlobalConstants/GlobalConstants\";\nimport { debounce } from \"throttle-debounce\";\n\nconst maximumPageSize: number = 65535;\nconst defaultSearchDebounceMilliseconds: number = 500;\nexport default class Databinder<TData> {\n  public maximumPageSize: number = maximumPageSize;\n  public pageSize: number = this.maximumPageSize;\n  public hasMorePages: boolean = true;\n  public page: number = GlobalConstants.one;\n  public dataset: TData[];\n  public pageableEndpoint: string;\n  public searchEndpoint: string = \"search\";\n  public applyPagingToSearches: boolean = true;\n  private debouncingSearcher: (\n    getSearchText: () => string,\n    onSearchAsync: () => Promise<void>,\n    onGetPage: () => void,\n    onCompleted: (resultset: TData[]) => void\n  ) => void;\n  public searchDebounceMilliseconds: number = defaultSearchDebounceMilliseconds;\n  public searchText: string = \"\";\n\n  constructor(\n    dataset: TData[],\n    pageableEndpoint?: string,\n    currentPage?: number,\n    pageSize?: number\n  ) {\n    this.page = currentPage ?? this.page;\n    this.pageSize = pageSize ?? this.pageSize;\n    this.dataset = dataset;\n    this.pageableEndpoint = pageableEndpoint ?? \"get-pageable\";\n    this.debouncingSearcher = debounce(\n      this.searchDebounceMilliseconds,\n      false,\n      async (\n        getSearchText: () => string,\n        onSearchAsync: () => Promise<void>,\n        onGetPage: () => void,\n        onCompleted: (resultset: TData[]) => void\n      ) => {\n        if (getSearchText()) {\n          this.hasMorePages = false;\n          await onSearchAsync();\n          onCompleted(this.dataset);\n        } else {\n          this.hasMorePages = true;\n          onCompleted([]);\n          this.replaceData([]);\n          this.page = GlobalConstants.one;\n          onGetPage();\n        }\n      }\n    );\n  }\n\n  public replaceData(newData: TData[]) {\n    this.dataset.splice(GlobalConstants.zero, this.dataset.length);\n    for (let i = 0; i < newData.length; i++) {\n      this.dataset.push(newData[i]);\n    }\n  }\n\n  public search(\n    searchText: string,\n    onSearchAsync: () => Promise<void>,\n    onGetPage: () => void,\n    onCompleted: (resultset: TData[]) => void\n  ) {\n    this.searchText = searchText;\n    this.debouncingSearcher(\n      () => this.searchText,\n      onSearchAsync,\n      onGetPage,\n      onCompleted\n    );\n  }\n\n  public appendData(newData: TData[]) {\n    const receivedValidData = newData && Array.isArray(newData);\n    if (receivedValidData) {\n      this.hasMorePages = newData.length === this.pageSize;\n      this.page += 1;\n      for (let i = 0; i < newData.length; i++) {\n        this.dataset.push(newData[i]);\n      }\n    }\n  }\n}\n","import ApiIntergratorBase from \"./ApiIntergratorBase\";\nimport ValidationResponse from \"./ValidationResponse\";\nimport Databinder from \"../Forms/DataList/DataboundList/Databinder\";\n\nexport default abstract class StandardApiIntergrator<\n  TModel\n> extends ApiIntergratorBase {\n  public async getPaged(pagesNavigator: Databinder<TModel>) {\n    await this.getOptionallyPaged(pagesNavigator);\n  }\n\n  public async searchAsync(dataAdapter: Databinder<TModel>): Promise<TModel[]> {\n    const endpoint = dataAdapter.searchEndpoint ?? \"search\";\n    dataAdapter = dataAdapter ?? new Databinder<TModel>([]);\n    let relativeUrl = `${endpoint}?searchText=${dataAdapter.searchText}`;\n    if (dataAdapter.applyPagingToSearches) {\n      relativeUrl += `&page=${dataAdapter.page}&pageSize=${dataAdapter.pageSize}`;\n    }\n    const result = await this.getAsync<TModel[]>(relativeUrl);\n    dataAdapter.replaceData(result);\n    return result;\n  }\n\n  public async getOptionallyPaged(\n    dataAdapter?: Databinder<TModel>\n  ): Promise<TModel[]> {\n    const shouldMakeCall = !dataAdapter || dataAdapter.hasMorePages;\n    if (shouldMakeCall) {\n      const endpoint = dataAdapter?.pageableEndpoint ?? \"get-pageable\";\n      dataAdapter = dataAdapter ?? new Databinder<TModel>([]);\n      const result = await this.getAsync<TModel[]>(\n        `${endpoint}?page=${dataAdapter.page}&pageSize=${dataAdapter.pageSize}`\n      );\n      dataAdapter.appendData(result);\n      return result;\n    } else {\n      return [];\n    }\n  }\n\n  public async insertAsync(model: TModel): Promise<ValidationResponse<TModel>> {\n    return await this.postAsync(\"insert\", model);\n  }\n\n  public async updateAsync(model: TModel) : Promise<ValidationResponse<TModel>>{\n    return await this.postAsync(\"update\",model);\n  }\n}\n","import StandardApiIntergrator from \"../../Api/StandardApiIntergrator\";\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\n\nexport default class ProjectDefinitionsListApiIntegrator extends StandardApiIntergrator<IProjectDefinition> {\n  basePath: string = \"ProjectDefinitions\";\n}\n","import StandardApiIntergrator from \"../../Api/StandardApiIntergrator\";\nimport IProcessRunningResult from \"../../Project/Data/IProcessRunningResult\";\nexport default class ProjectDefinitionRunnerApiIntegrator extends StandardApiIntergrator<object> {\n  basePath: string = \"Run\";\n\n  \n\n  public async runByIdAsync(\n    projectId: string\n  ): Promise<IProcessRunningResult[]> {\n    \n    const result = await this.getAsync<IProcessRunningResult[]>(\n      `run-by-id?projectId=${projectId}`\n    );\n    return result;\n  }\n\n  \n}\n","import { PotterLogicBase } from \"react-potter\";\nimport ProjectDefinitionsListRepository from \"./ProjectDefinitionsListRepository\";\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\nimport ProjectDefinitionsListApiIntegrator from \"../Data/ProjectDefinitionsListApiIntegrator\";\nimport Databinder from \"../../Forms/DataList/DataboundList/Databinder\";\nimport ProjectDefinitionRunnerApiIntegrator from \"../../ProjectRunning/Data/ProjectDefinitionRunnerApiIntegrator\";\n\nexport default class ProjectDefinitionsListLogic extends PotterLogicBase<\n  ProjectDefinitionsListRepository,\n  IProjectDefinition\n> {\n\n  private get branchlessLabel() : string {\n    return \"Local Only Projects!\";\n  }\n  private dataAdapter = new Databinder<IProjectDefinition>([], \"get-all\");\n  public async fetchProjectDefinitionsAsync() {\n    const projectDefinitions = await this.runAsync({\n      fn: async () => {\n        try{\n        const result = await new ProjectDefinitionsListApiIntegrator().getOptionallyPaged(\n          this.dataAdapter\n        );\n        this.context.repository.hasFetchedProjectDefinitions = true;\n        return result;\n        }\n        catch(e){\n          console.error(e);\n          setTimeout(async () => {\n            await this.fetchProjectDefinitionsAsync();\n          }, 2000);\n          return [];\n        }  \n      },\n    });\n    this.potter.pushToRepository({ projectDefinitions: projectDefinitions });\n  }\n\n  \n  public get tabs() : string[]{\n    const result = [];\n    let hasBranchless = false;\n    if(this.context.repository.hasFetchedProjectDefinitions){\n      for(let i = 0; i < this.context.repository.projectDefinitions.length; i++){\n        if(this.context.repository.projectDefinitions[i].repositoryDetail && this.context.repository.projectDefinitions[i].repositoryDetail.branch){\n          const candidateBranch = this.toTitleCase(this.context.repository.projectDefinitions[i].repositoryDetail.branch);\n          if(result.indexOf(candidateBranch) === -1){\n            result.push(candidateBranch);\n          }\n        }else{\n          hasBranchless = true;\n        }\n      }\n    }\n    result.sort((a, b) => { \n      if(a.toLowerCase() < b.toLowerCase()){\n        return -1;\n      }else{\n        return 1;\n      }\n    });\n    if(hasBranchless){\n    result.push(this.branchlessLabel);\n    }\n    return result;\n  }\n\n  public getProjectsByBranch(args: { branch: string}) : IProjectDefinition[]{\n    const targetProjects = args.branch === this.branchlessLabel ? this.context.repository.projectDefinitions.filter((projectDefinition) => {\n      return !projectDefinition.repositoryDetail || !projectDefinition.repositoryDetail.branch;\n    }) : this.context.repository.projectDefinitions.filter((projectDefinition) => {\n      if(projectDefinition.repositoryDetail && projectDefinition.repositoryDetail.branch){\n        return this.toTitleCase(projectDefinition.repositoryDetail.branch) === args.branch;\n      }\n      return false;\n    }) ?? [];\n    return targetProjects;\n  }\n\n  private toTitleCase(str: string) {\n    if(str){\n      const firstChar = str.charAt(0).toUpperCase();\n      const rest = str.substring(1).toLocaleLowerCase();\n      return `${firstChar}${rest}`;\n    }else{\n      return \"\";\n    }\n  }\n\n  public async runProjectAsync(projectId: string) {\n    const succeeded = await this.runAsync({\n      fn: async () => {\n        return await new ProjectDefinitionRunnerApiIntegrator().runByIdAsync(\n          projectId\n        );\n      },\n    });\n\n    if (succeeded) {\n      this.potter.pushToRepository({ message: \"Completed successfully\" });\n    } else {\n      this.potter.pushToRepository({\n        message: \"Unable to complete running of project\",\n      });\n    }\n  }\n}\n","import { PotterRepositoryBase } from \"react-potter\";\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\nexport default class ProjectDefinitionsListRepository extends PotterRepositoryBase {\n  projectDefinitions: IProjectDefinition[] = [];\n  message: string = \"\";\n  hasFetchedProjectDefinitions: boolean = false;\n  startingUpText: string = \"Gundi is starting up. Please wait...\";\n}\n","import { ReactElement } from \"react\";\nimport { Table, Button, Tabs, Tab, ButtonGroup } from \"react-bootstrap\";\nimport { PotterChildComponent } from \"react-potter\";\nimport { IPotterChildComponentProps } from \"react-potter/build/components/PotterChildComponent\";\n\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\nimport ProjectDefinitionsListLogic from \"../Potter/ProjectDefinitionsListLogic\";\nimport ProjectDefinitionsListRepository from \"../Potter/ProjectDefinitionsListRepository\";\n\nconst styles = {\n  container: {\n    margin: \"10px\",\n  },\n};\n\ninterface IProps\n  extends IPotterChildComponentProps<\n    ProjectDefinitionsListRepository,\n    object,\n    ProjectDefinitionsListLogic\n  > {}\n\nexport default class ProjectDefinitionsTable extends PotterChildComponent<\n  ProjectDefinitionsListRepository,\n  object,\n  ProjectDefinitionsListLogic,\n  IProps\n> {\n  onRender(): ReactElement {\n    return (\n      <div style={styles.container}>\n        <Tabs id=\"projects\" className=\"mb-3\">\n          {this.logic.tabs.map((label) => {\n            const tableProjects = this.logic.getProjectsByBranch({\n              branch: label,\n            });\n            const count = tableProjects?.length ?? 0;\n            return (\n              <Tab key={label} eventKey={label} title={`${label} (${count})`}>\n                {this.table({\n                  branch: label,\n                })}\n              </Tab>\n            );\n          })}\n        </Tabs>\n      </div>\n    );\n  }\n\n  table(args: { branch: string }): ReactElement {\n    return (\n      <Table striped bordered hover size=\"sm\" responsive>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Project</th>\n            <th>Build Number</th>\n            <th>Action</th>\n          </tr>\n          {this.logic\n            .getProjectsByBranch(args)\n            .map((projectDefinition: IProjectDefinition, index: number) => {\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{projectDefinition.label}</td>\n                  <td></td>\n                  <td>\n                    <ButtonGroup>\n                      <Button\n                        onClick={() => {\n                          window.basicRouter.push({\n                            path: \"/project\",\n                            data: projectDefinition,\n                          });\n                        }}\n                      >\n                        Run\n                      </Button>\n                      <Button\n                        variant=\"info\"\n                        onClick={() => {\n                          window.basicRouter.push({\n                            path: \"/projects/manage\",\n                            data: projectDefinition,\n                          });\n                        }}\n                      >\n                        Configure\n                      </Button>\n                    </ButtonGroup>\n                  </td>\n                </tr>\n              );\n            })}\n        </thead>\n      </Table>\n    );\n  }\n}\n","import { Modal, ProgressBar } from \"react-bootstrap\";\n\ninterface IProps {\n  show: boolean;\n}\nexport default function BusyDialog(props: IProps) {\n  return (\n    <Modal show={props.show}>\n      <ProgressBar animated now={100} />\n    </Modal>\n  );\n}\n","import { PureComponent, ReactNode } from \"react\";\n\ninterface IProps{\n    title: string;\n}\n\nexport default class PageHeader extends PureComponent<IProps>{\n    render(): ReactNode {\n        window.document.title = this.props.title;\n        return <>\n            <h1>{this.props.title}</h1>\n            <hr />\n        </>\n    }\n}","import { ReactElement } from \"react\";\nimport { PotterComponent } from \"react-potter\";\nimport ProjectDefinitionsListLogic from \"../Potter/ProjectDefinitionsListLogic\";\nimport ProjectDefinitionsListRepository from \"../Potter/ProjectDefinitionsListRepository\";\nimport ProjectDefinitionsTable from \"./ProjectDefinitionsTable\";\nimport BusyDialog from \"../../Busy/BusyDialog\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport PageHeader from \"../../PageHeader/UI/PageHeader\";\n\ninterface IProps {}\n\nexport default class ProjectDefinitionsList extends PotterComponent<\n  ProjectDefinitionsListRepository,\n  object,\n  ProjectDefinitionsListLogic,\n  IProps\n> {\n  constructor() {\n    super(\n      new ProjectDefinitionsListRepository(),\n      {},\n      new ProjectDefinitionsListLogic()\n    );\n  }\n\n  message(): ReactElement {\n    return (\n      <Modal\n        show={this.repository.message ? true : false}\n        onHide={() => this.potter.pushToRepository({ message: \"\" })}\n      >\n        <Modal.Body>{this.repository.message}</Modal.Body>\n        <Modal.Footer>\n          <Button\n            variant=\"secondary\"\n            onClick={() => this.potter.pushToRepository({ message: \"\" })}\n          >\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n\n  async componentDidMount() {\n    await this.logic.fetchProjectDefinitionsAsync();\n  }\n\n  componentToShow = (): ReactElement => {\n    if (this.repository.hasFetchedProjectDefinitions) {\n      return (\n        <ProjectDefinitionsTable\n          potter={this.potter}\n          key={this.getChildKeyFromObject(this.repository.projectDefinitions)}\n        />\n      );\n    } else {\n      return (\n        <div\n          style={{\n            width: \"100%\",\n            margin: \"auto\",\n            border: \"solid 1px #DFDFDF\",\n            textAlign: \"center\",\n            paddingTop: \"50px\",\n          }}\n        >\n          {this.repository.startingUpText}\n        </div>\n      );\n    }\n  };\n\n  onRender(): ReactElement {\n    return (\n      <>\n        <PageHeader title=\"Projects\" />\n        <Button\n          onClick={() => {\n            window.basicRouter.push({\n              path: \"/projects/manage\",\n              data: {},\n            });\n          }}\n        >\n          Add Project\n        </Button>\n        <BusyDialog show={this.repository.busy} />\n        {this.componentToShow()}\n      </>\n    );\n  }\n\n  async onStartedAsync() {}\n}\n","export default function GetRouteData<TState>(): TState {\n  return window.history.state as TState;\n}\n","export default class ServerEventListener{\n    eventSource: EventSource;\n    constructor(args: {  url: string, onData: (data: string) => void, onCompleted: () => void}){\n        this.eventSource = new EventSource(args.url);\n        this.eventSource.onmessage = (event) => {\n            if(event.data === \"---terminate---\" && this.eventSource){\n                this.eventSource.close();\n                this.eventSource.onmessage = null;\n                args.onCompleted();\n            }else{\n                args.onData(event.data);\n            }\n        }\n    }\n}","import { PotterLogicBase } from \"react-potter\";\nimport GetRouteData from \"../../BasicRouter/BasicRouterDataReader\";\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\nimport ProjectDefinitionRunnerApiIntegrator from \"../../ProjectRunning/Data/ProjectDefinitionRunnerApiIntegrator\";\nimport IProcessRunningResult from \"../Data/IProcessRunningResult\";\nimport ProjectRepository from \"./ProjectRepository\";\nimport ServerEventListener from \"../../EventStreaming/ServerEventListener\";\nimport Settings from \"../../Settings/Settings\";\nexport default class ProjectLogic extends PotterLogicBase<\n  ProjectRepository,\n  IProjectDefinition\n> {\n\n  private isRunning: boolean = false;\n\n  public get projectDefinition(): IProjectDefinition {\n    return GetRouteData<IProjectDefinition>();\n  }\n\n\n  public async runProjectAsync() {\n      try{\n          if(this.isRunning){\n            return;\n          }\n          this.potter.pushToRepository({busy:true});\n          this.handleEventListening();\n          this.isRunning = true;\n          const result =\n          await new ProjectDefinitionRunnerApiIntegrator().runByIdAsync(\n            this.projectDefinition.projectId\n          );\n          \n        this.potter.pushToRepository({ processRunningResult: result });\n      }catch(e){\n        console.error(e);\n        const result = {\n          errors: [\"Error occured on server\"],\n        } as IProcessRunningResult;\n        this.potter.pushToRepository({ processRunningResult: [result] });\n      }finally{\n        this.isRunning = false;\n      }\n  }\n\n  public get hasOutput(): boolean {\n    return this.context.repository.output && \n    this.context.repository.output.length > 0;\n  }\n\n  private scrollToBottom(){\n    const outputDiv = document.getElementById(\"gundi-output\");\n    if(outputDiv){\n    outputDiv.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"});\n    }\n  }\n\n  private handleEventListening(){\n    new ServerEventListener(\n      {\n        url: `${new Settings().host}api/v1/EventQueue/listen?projectId=${this.projectDefinition.projectId}`,\n        onData: (data: string) => {\n          this.context.repository.output.push(data);\n          this.potter.pushToRepository({});\n          this.scrollToBottom();\n        },\n        onCompleted: () => {\n          this.potter.pushToRepository({busy:false});\n          this.scrollToBottom();\n        }\n      }\n    )\n  }\n}\n","import { PotterRepositoryBase } from \"react-potter\";\nimport IProcessRunningResult from \"../Data/IProcessRunningResult\";\n\nexport default class ProjectRepository extends PotterRepositoryBase {\n  processRunningResult: IProcessRunningResult[] = [];\n  output: string[] = [];\n}\n","import { ReactElement, ReactNode } from \"react\";\nimport BusyDialog from \"../Busy/BusyDialog\";\ninterface IProps {\n  title: string;\n  busy: boolean;\n  children: ReactNode;\n}\nexport default function Page(props: IProps): ReactElement {\n  document.title = props.title;\n  return (\n    <>\n      <BusyDialog show={props.busy} />\n      {props.children}\n    </>\n  );\n}\n","import { PotterComponent } from \"react-potter\";\nimport ProjectLogic from \"../Potter/ProjectLogic\";\nimport ProjectRepository from \"../Potter/ProjectRepository\";\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\nimport { ReactElement } from \"react\";\nimport Page from \"../../Layout/Page\";\nimport Linkify from 'react-linkify';\n\nconst styles = {\n  header: {\n    fontSize: \"25px\",\n    fontWeight: \"bold\",\n  },\n};\n\nexport default class Project extends PotterComponent<\n  ProjectRepository,\n  IProjectDefinition,\n  ProjectLogic,\n  any\n> {\n  constructor() {\n    super(\n      new ProjectRepository(),\n      {} as IProjectDefinition,\n      new ProjectLogic()\n    );\n  }\n\n  async componentDidMount() {\n    await this.logic.runProjectAsync(); \n  }\n\n  onRender(): ReactElement {\n    return (\n      <Page\n        title={`Gundi - ${this.logic.projectDefinition.label}`}\n        busy={this.repository.busy}\n      >\n        <div style={styles.header}>{this.logic.projectDefinition.label}</div>\n        <hr />\n        <div id=\"gundi-output\" style={{padding:\"10px\", margin:\"4px\", border:\"solid 1px #DFDFDF\"}}>\n        <Linkify>\n        <ol>\n          {this.repository.output.map((chunk) => {\n            const lines = chunk.split(\"<br/>\")\n            return lines.map((line, index) => {\n              if(line){\n              return <li key={index}>{line}</li>\n            }else{\n              return <></>\n            }});\n          })}\n        </ol>\n        </Linkify>\n        </div>\n      </Page>\n    );\n  }\n\n  async onStartedAsync() {\n   \n    \n  }\n}\n","export default abstract class StringsBase{\n    applicationName: string = \"Gundi\";\n    save: string = \"Save\";\n}","import StringsBase from \"../../Strings/StringsBase\";\n\nexport default class LandingStrings extends StringsBase{\n    addNewApplication: string = \"Add New Application\";\n}","import ModuleStateManager from \"module-state-manager\";\nimport LandingStrings from \"./Data/LandingStrings\";\n\nexport default class LandingLogic extends ModuleStateManager{\n    repository: any;\n    model: any;\n    strings: LandingStrings = new LandingStrings();\n}","import { PureComponent } from \"react\";\nimport LandingLogic from \"../LandingLogic\";\nimport \"../../grid.css\";\nimport { Button } from \"react-bootstrap\";\nimport PageHeader from \"../../PageHeader/UI/PageHeader\";\n\nconst styles = {\n  container: {\n    width: \"90%\",\n    margin: \"auto\",\n  },\n};\nlet logic: LandingLogic = new LandingLogic();\nexport default class Landing extends PureComponent {\n  render() {\n    return (\n      <div style={styles.container}>\n        <PageHeader title={\"Welcome to \" + logic.strings.applicationName} />\n        <div className=\"flex-grid-responsive\">\n          <div className=\"col1\">\n            <Button\n              onClick={() =>\n                window.basicRouter.push({ path: \"/projects/manage\", data: {} })\n              }\n            >\n              Add New Project\n            </Button>\n          </div>\n          {/* <div className=\"col12\">\n            <Button\n              onClick={() =>\n                window.basicRouter.push({ path: \"/applications/form\" })\n              }\n            >\n              {logic.strings.addNewApplication}\n            </Button>\n          </div> */}\n        </div>\n      </div>\n    );\n  }\n}\n","import { PureComponent, ReactNode } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"../../grid.css\";\n\ninterface IProps {\n  children: ReactNode;\n}\nexport default class NavigationSupport extends PureComponent<IProps> {\n  render() {\n    return (\n      <div className=\"flex-grid-responsive\">\n        <div className=\"col1\">\n          <div>\n            <Button\n              variant=\"link\"\n              onClick={() => window.basicRouter.push({ path: \"/\" })}\n            >\n              Home\n            </Button>\n          </div>\n          <div>\n            <Button\n              variant=\"link\"\n              onClick={() =>\n                window.basicRouter.push({ path: \"/project-definitions/list\" })\n              }\n            >\n              Projects\n            </Button>\n          </div>\n        </div>\n        <div className=\"col6\">{this.props.children}</div>\n      </div>\n    );\n  }\n}\n","import { PureComponent, ReactNode } from \"react\";\nimport IValidationError from \"../ValidatableUI/IValidationError\";\n\ninterface IInputField {\n  children: React.ReactNode;\n  validationErrors: IValidationError[];\n  id: string;\n  displayLabel?: string;\n}\n\nexport type IInputFieldSupport = Omit<IInputField, \"children\">;\n\nexport default class InputField extends PureComponent<IInputField> {\n  private get displayLabel(): ReactNode {\n    if (this.props.displayLabel) {\n      return <div>{this.props.displayLabel}</div>;\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {this.displayLabel}\n        {this.props.children}\n      </>\n    );\n  }\n}\n","import IDropdownValueAdapter from \"./IDropdownValueAdapter\"\nexport default class DefaultDropdownAdapter<TData extends object> implements IDropdownValueAdapter<TData,TData>{\n    onSelectionChanged (newValue: TData | TData[]) : TData | TData[]{\n        return newValue;\n    }\n    adaptManyToDropdownValue(data: TData[]): TData[] {\n        return data;\n    }\n    extractManyDataFromDropdownValue(dropdownValue: TData[]): TData[] {\n        return dropdownValue;\n    }\n    adaptSingleToDropdownValue(data: TData): TData {\n        return data;\n    }\n    extractSingleDataFromDropdownValue(dropdownValue: TData): TData {\n        return dropdownValue;\n    }\n\n}","import { PureComponent } from \"react\";\nimport InputField, { IInputFieldSupport } from \"../InputField\";\nimport Select from \"react-select\";\nimport IDropdownValueAdapter from \"./IDropdownValueAdapter\";\nimport DefaultDropdownAdapter from \"./DefaultDropdownAdapter\";\n\ninterface IProps<TData extends object,TDropDownValue extends object={}> extends IInputFieldSupport {\n    data: TData[];\n    onSelectionChanged?: (data: TData[] | TData) => void;\n    selected?: TData[] | TData;\n    adapter?: IDropdownValueAdapter<TData,TDropDownValue>\n}\n\nexport default class Dropdown<TData extends object,TDropDownValue extends object> extends PureComponent<IProps<TData,TDropDownValue>>{\n    \n    private dropDownValues: TDropDownValue[] = [];\n\n    \n    private get adapter() : IDropdownValueAdapter<TData,TDropDownValue>{\n        if(this.props.adapter){\n            return this.props.adapter;\n        }else{\n            const defaultAdapter = new DefaultDropdownAdapter<TData>();\n            return defaultAdapter as unknown as IDropdownValueAdapter<TData,TDropDownValue>;\n        }\n    }\n\n    \n\n    \n    \n\n    render(){\n       return   <InputField {...this.props}>\n                    <Select \n                        closeMenuOnSelect\n                        options={this.props.data.map(x => this.adapter.adaptSingleToDropdownValue(x)) } \n                        {...this.props.adapter}\n                        onChange={(newValue) => {\n                            if(this.props.onSelectionChanged){\n                                const userData = this.adapter.onSelectionChanged(newValue as any);\n                                this.props.onSelectionChanged(userData);\n                            }\n                    }} />\n                </InputField>\n    }\n}","import IDropdownValueAdapter from \"../IDropdownValueAdapter\";\nimport IReactSelectValue from \"./IReactSelectValue\";\n\nexport default class ReactSelectDropDownAdapter<TData extends object> implements IDropdownValueAdapter<TData,IReactSelectValue<TData>>{\n    \n    public isMulti?: boolean;\n\n    public closeMenuOnSelect?: boolean;\n\n    private labelKey: string;\n\n    constructor(labelKey: Extract<keyof TData, string>, props: {isMulti?: boolean, closeMenuOnSelect?: boolean} = {}) {\n        this.labelKey = labelKey;\n        this.isMulti = props.isMulti;\n        this.closeMenuOnSelect = props.closeMenuOnSelect;\n    }\n    adaptManyToDropdownValue(data: TData[]): IReactSelectValue<TData>[] {\n        return data.map(a => this.adaptSingleToDropdownValue(a));\n    }\n    extractManyDataFromDropdownValue(dropdownValue: IReactSelectValue<TData>[]): TData[] {\n        return dropdownValue.map(a => this.extractSingleDataFromDropdownValue(a));\n    }\n    \n    \n    \n    adaptSingleToDropdownValue(data: TData): IReactSelectValue<TData> {\n        \n        return {\n            value: data,\n            label: this.getLabel(data)\n        }\n    }\n    extractSingleDataFromDropdownValue(dropdownValue: IReactSelectValue<TData>): TData {\n        return dropdownValue?.value;\n    }\n\n    onSelectionChanged (newValue: IReactSelectValue<TData>[] | IReactSelectValue<TData>) : TData[] | TData\n    {\n        const selectedData = this.isMulti === true ? newValue as IReactSelectValue<TData>[] : newValue as IReactSelectValue<TData>;\n        if(this.isMulti)\n        {\n            const selectedDataAsArray = selectedData as [];\n            const userData = selectedDataAsArray.map(x => this.extractSingleDataFromDropdownValue(x));\n            return userData;\n        }else{\n            const userData = this.extractSingleDataFromDropdownValue(selectedData as IReactSelectValue<TData>);\n            return userData;\n        }\n    }\n\n    private getLabel(data: TData) : string {\n        if(data){\n           const labelProperty = Reflect.getOwnPropertyDescriptor(data, this.labelKey)\n           if(labelProperty){\n               const labelValue = labelProperty.value;\n               if(labelValue){\n                   return labelValue.toString();\n               }\n           } \n        }\n        return \"\";\n    }\n}","import { CSSProperties, PureComponent, ReactNode } from \"react\";\n\ninterface IProps{\n    children: React.ReactNode; \n    title: string;\n    description: string;\n    buttons?: React.ReactNode;\n}\n\nconst styles={\n    form:{\n        width: \"90%\",\n        margin: \"auto\",\n        padding: \"10px\"\n    },\n    buttonsContainer:{\n        textAlign:\"right\"\n    } as CSSProperties\n}\n\n\nexport default class GundiForm extends PureComponent<IProps>{\n    \n    private get buttons() : ReactNode{\n        if(this.props.buttons){\n            return <div style={styles.buttonsContainer}>\n                        <hr/>\n                        {this.props.buttons}\n                    </div>\n        }else{\n            return null;\n        }\n    }\n    \n    render(){\n        return  <div style={styles.form}>\n                    <div>\n                        <h1>{this.props.title}</h1>\n                        <div>{this.props.description}</div>\n                        <hr/>\n                    </div>\n                    {this.props.children}\n                    {this.buttons}\n                </div>\n    }\n}","import { PureComponent, ReactNode } from \"react\";\nimport IValidationError from \"../ValidatableUI/IValidationError\";\n\ninterface IProps {\n  validationErrors: IValidationError[];\n  children: ReactNode;\n  id: string;\n}\n\nconst styles = {\n  errorText: {\n    color: \"red\",\n  },\n};\n\nexport default class ErrorDisplayer extends PureComponent<IProps> {\n  private get firstError(): string {\n    if (this.props.validationErrors && this.props.validationErrors.length > 0) {\n      const firstError = this.props.validationErrors.find(\n        (error) => error.key === this.props.id\n      );\n      if (firstError) {\n        return firstError.errors[0];\n      }\n    }\n    return \"\";\n  }\n  render(): ReactNode {\n    if (this.firstError) {\n      return (\n        <>\n          {this.props.children}\n          <div style={styles.errorText}>{this.firstError}</div>\n        </>\n      );\n    } else {\n      return this.props.children;\n    }\n  }\n}\n","import { PureComponent } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport ErrorDisplayer from \"./ErrorDisplayer\";\nimport { IInputFieldSupport } from \"./InputField\";\n\ninterface IProps extends IInputFieldSupport {\n  onChange: (value: string) => void;\n  value: string;\n  description?: string;\n}\nexport default class Textbox extends PureComponent<\n  Exclude<IProps, \"children\">\n> {\n  // render(){\n  //     return <InputField {...this.props}>\n  //         <input type={\"text\"} onChange={(e) => this.props.onChange(e.target.value)} defaultValue={this.props.value}/>\n  //         </InputField>\n  // }\n\n  render() {\n    return (\n      <ErrorDisplayer\n        id={this.props.id}\n        validationErrors={this.props.validationErrors}\n      >\n        <Form.Group className=\"mb-3\" controlId=\"label\">\n          <Form.Label>{this.props.displayLabel}</Form.Label>\n          <Form.Control\n            type=\"text\"\n            title={this.props.displayLabel}\n            placeholder={this.props.displayLabel}\n            value={this.props.value}\n            onChange={(e) => {\n              this.props.onChange(e.target.value);\n            }}\n          />\n          <Form.Text className=\"text-muted\">{this.props.description}</Form.Text>\n        </Form.Group>\n      </ErrorDisplayer>\n    );\n  }\n}\n","import IValidationError from \"../../ValidatableUI/IValidationError\";\nimport IApplicationProjectDefinition from \"./IApplicationProjectDefinition\";\n\nexport default class ApplicationFormRepository{\n    public applicationProjectDefinitions: IApplicationProjectDefinition[] = [];\n    public validationErrors: IValidationError[] = [];\n}","import StringsBase from \"../../Strings/StringsBase\";\n\nexport default class ApplicationFormStrings extends StringsBase{\n    name: string = \"Application Name\";\n    addNewApplication: string = \"Add New Application\";\n    description: string = \"Use this form to add a new application.\";\n    projects: string = \"Projects\";\n}","import ModuleStateManager from \"module-state-manager\";\nimport Databinder from \"../Forms/DataList/DataboundList/Databinder\";\nimport IProjectDefinition from \"../ProjectDefinitions/Data/IProjectDefinition\";\nimport ProjectDefinitionsListApiIntegrator from \"../ProjectDefinitionsList/Data/ProjectDefinitionsListApiIntegrator\";\nimport ApplicationFormRepository from \"./Data/ApplicationFormRepository\";\nimport ApplicationFormStrings from \"./Data/ApplicationFormStrings\";\nimport IApplication from \"./Data/IApplication\";\nimport IApplicationProjectDefinition from \"./Data/IApplicationProjectDefinition\";\n\nexport default class ApplicationFormLogic extends ModuleStateManager<ApplicationFormRepository,IApplication>{\n    strings: ApplicationFormStrings = new ApplicationFormStrings();\n    repository: ApplicationFormRepository = new ApplicationFormRepository();\n    model: IApplication = {} as IApplication;\n\n    private dataAdapter = new Databinder<IProjectDefinition>([], \"get-all\");\n    onProjectSelectionChanged (data:  IApplicationProjectDefinition[]) : void {\n        \n        this.updateModel({ applicationProjectDefinitions: data  });\n    }\n\n    setApplicationDisplayLabel(displayLabel: string){\n        this.updateModel({ displayLabel });\n    }\n\n    public async fetchProjectDefinitionsAsync() {\n        const projectDefinitions = await new ProjectDefinitionsListApiIntegrator().getOptionallyPaged(\n            this.dataAdapter\n            );\n        const applicationProjectDefinitions = projectDefinitions\n        .filter(a => a.repositoryDetail ? true : false)\n        .map(a => {\n            return {\n                label: a.repositoryDetail.branch + \" − \"+ a.label,\n                repositoryDetail: a.repositoryDetail,\n                tag: \"\"\n            }\n        });\n        applicationProjectDefinitions.sort((a,b) => a.label.localeCompare(b.label));\n        this.updateRepository({ applicationProjectDefinitions:  applicationProjectDefinitions});\n    }\n\n    public async saveApplicationAsync(){\n        const application = this.model;\n        return Promise.resolve(application);\n    }\n}","import { PureComponent, ReactNode } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Dropdown from \"../../Forms/Dropdown/Dropdown\";\nimport ReactSelectDropDownAdapter from \"../../Forms/Dropdown/ReactSelect/ReactSelectDropDownAdapter\";\nimport GundiForm from \"../../Forms/GundiForm\";\nimport Textbox from \"../../Forms/Textbox\";\nimport ApplicationFormLogic from \"../ApplicationFormLogic\";\nimport IApplicationProjectDefinition from \"../Data/IApplicationProjectDefinition\";\n\nlet logic: ApplicationFormLogic = new ApplicationFormLogic();\n\n\n\nexport default class ApplicationForm extends PureComponent{\n    \n    async componentDidMount(){\n        logic.setRerender(() => this.forceUpdate());\n        await logic.fetchProjectDefinitionsAsync();\n    }\n\n    get saveButton() : ReactNode{\n        return <Button onClick={async () => await logic.saveApplicationAsync()}>{logic.strings.save}</Button>\n    }\n    \n    render(){\n        return <GundiForm \n            title={logic.strings.addNewApplication} \n            description={logic.strings.description}\n            buttons={this.saveButton}>\n            <Textbox \n                displayLabel={logic.strings.name} \n                validationErrors={logic.repository.validationErrors} \n                id=\"Application.DisplayLabel\"\n                onChange={(value: string) => logic.setApplicationDisplayLabel(value)}\n                value={logic.model.displayLabel} />\n            <Dropdown \n                id=\"Application.Projects\" \n                displayLabel={logic.strings.projects}\n                data={logic.repository.applicationProjectDefinitions} \n                validationErrors={logic.repository.validationErrors}\n                selected={logic.model.applicationProjectDefinitions}\n                onSelectionChanged={(data) => {\n                    logic.onProjectSelectionChanged(data as IApplicationProjectDefinition[])\n                }}\n                adapter={new ReactSelectDropDownAdapter<IApplicationProjectDefinition>(\"label\",{\n                    isMulti: true,\n                    closeMenuOnSelect: false\n                })}\n                />\n                \n        </GundiForm>\n    }\n}","export default class AsyncRunner{\n    private runStateWriter: (running: boolean) => void;\n    constructor(args: {runStateWriter: (running: boolean) => void}){\n        this.runStateWriter = args.runStateWriter;\n    }\n\n    public async runAsync<TResult>(fn: () => Promise<TResult>) : Promise<TResult>{\n        try{\n            this.runStateWriter(true);\n            return await fn();\n        }finally{\n            this.runStateWriter(false);\n        }\n    }\n}","import StandardApiIntergrator from \"../../Api/StandardApiIntergrator\";\nimport IProject from \"./IProject\";\n\nexport default class ProjectApiIntergrator extends StandardApiIntergrator<IProject>{\n    protected get basePath(): string {\n        return \"Projects\"\n    }\n\n    public async getByIdAsync(args: {id: string}): Promise<IProject>{\n        return await this.getAsync(\"get-by-id?id=\" + args.id);\n    }\n}","\n\nexport default class ProjectDefinitionRepository{\n    busy: boolean = false;\n    savedModel: string = \"\";\n\n}","import ModuleStateManager from \"module-state-manager\";\nimport AsyncRunner from \"../AsyncRunner/AsyncRunner\";\nimport IProject from \"../Project/Data/IProject\";\nimport ProjectApiIntergrator from \"../Project/Data/ProjectApiIntergrator\";\nimport ProjectDefinitionsListApiIntegrator from \"../ProjectDefinitionsList/Data/ProjectDefinitionsListApiIntegrator\";\nimport IProjectDefinition from \"./Data/IProjectDefinition\";\nimport ProjectDefinitionRepository from \"./Data/ProjectDefinitionRepository\";\n\nexport default class ProjectDefinitionsLogic extends ModuleStateManager<ProjectDefinitionRepository,IProjectDefinition>{\n    repository: ProjectDefinitionRepository = new ProjectDefinitionRepository();\n    model: IProjectDefinition = {} as IProjectDefinition;\n    private asyncRunner = new AsyncRunner({\n        runStateWriter: (running: boolean) => this.updateRepository({busy: running})\n    });\n\n\n    public async initializeAsync(){\n        const project = await this.asyncRunner.runAsync(async () => {\n            return await new ProjectApiIntergrator().getByIdAsync({id: this.model.projectId});\n        });\n        if(project){\n            this.model.project = project;\n        }else{\n            this.model.project = {} as IProject;\n        }\n    }\n    \n\n    public async submitAsync() {\n        await this.asyncRunner.runAsync(async () => {\n        await new ProjectDefinitionsListApiIntegrator().updateAsync(this.model);\n        this.repository.savedModel = JSON.stringify(this.model);\n        });\n    }\n\n    public get modelChanged () : boolean{\n        return JSON.stringify(this.model) !== this.repository.savedModel;\n    }\n}","import { PureComponent, ReactNode } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport GetRouteData from \"../../BasicRouter/BasicRouterDataReader\";\nimport BusyDialog from \"../../Busy/BusyDialog\";\nimport PageHeader from \"../../PageHeader/UI/PageHeader\";\nimport IProjectDefinition from \"../Data/IProjectDefinition\";\nimport ProjectDefinitionsLogic from \"../ProjectDefinitionsLogic\";\n\nconst logic = new ProjectDefinitionsLogic();\nexport default class ProjectDefinition extends PureComponent{\n    \n    async componentDidMount(){\n        logic.setRerender(() => this.forceUpdate());\n        logic.model = GetRouteData<IProjectDefinition>()\n        await logic.initializeAsync();\n        logic.repository.savedModel = JSON.stringify(logic.model);\n        this.forceUpdate();\n    }\n\n\n    private get projectConfigurations() : ReactNode{\n        return <>\n            <h3>Project Settings</h3>\n            <Form.Group className=\"mb-3\" controlId=\"publishUrl\">\n                <Form.Label>Publish URL</Form.Label>\n                <Form.Control \n                    type=\"text\" \n                    title={logic.model.project.publishUrl}\n                    placeholder=\"Enter url to publish to\" \n                    value={logic.model.project.publishUrl}\n                    onChange={(e) => logic.updateModel({project: {...logic.model.project, publishUrl: e.target.value}})} />\n                <Form.Text className=\"text-muted\">\n                Git remote to which build artifacts are pushed to on successful builds.\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"buildOutputDirectory\">\n                <Form.Label>Build Output Directory</Form.Label>\n                <Form.Control \n                    type=\"text\" \n                    title={logic.model.project.buildOutputDirectory} \n                    value={logic.model.project.buildOutputDirectory}\n                    onChange={(e) => logic.updateModel({project: {...logic.model.project, buildOutputDirectory: e.target.value}})} />\n                <Form.Text className=\"text-muted\">\n                This is the directory to which build artifacts are placed in on successful build.\n                </Form.Text>\n            </Form.Group>\n        </>\n    }\n    \n    \n    render(): ReactNode {\n        return  <>\n                    <BusyDialog show={logic.repository.busy} />\n                    <PageHeader title={\"Configure: \" + logic.model.label} />\n                    <div style={{width:\"90%\", marginTop:\"30px\"}}>\n                    <Form>\n                        {logic.model.project ? <>\n                            {this.projectConfigurations}\n                            <hr />\n                        </>\n                        \n                        : null }\n                        <h3>Build Settings</h3>\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n                            <Form.Check \n                            type={\"switch\"}\n                            label={`Delete Local Repository After Build Success`}\n                            checked={!logic.model.keepSource}\n                            onChange={() => logic.updateModel({keepSource: !logic.model.keepSource})}\n                            />\n                        </Form.Group>\n                    <Button onClick={async () => await logic.submitAsync()} disabled={!logic.modelChanged}>Save</Button>\n                    </Form>\n                    </div>\n        </>\n    }\n}","import ApiIntergratorBase from \"../../Api/ApiIntergratorBase\";\nimport ValidationResponse from \"../../Api/ValidationResponse\";\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\n\nexport default class ManageProjectApiCaller extends ApiIntergratorBase {\n  protected get basePath(): string {\n    return \"ProjectDefinitions\";\n  }\n\n  public async saveAsync(\n    projectDefinition: IProjectDefinition\n  ): Promise<ValidationResponse<IProjectDefinition>> {\n    return await this.postAsync<ValidationResponse<IProjectDefinition>>(\n      projectDefinition.projectId ? \"Update\" : \"Insert\",\n      projectDefinition\n    );\n  }\n}\n","import ModuleStateManager from \"module-state-manager\";\nimport IProject from \"../../Project/Data/IProject\";\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\nimport IRepositoryDetail from \"../../RepositoryDetail/Data/IRepositoryDetail\";\nimport ManageProjectApiCaller from \"../Data/ManageProjectApiCaller\";\nimport ManageProjectRepository from \"./ManageProjectRepository\";\n\nexport default class ManageProjectLogic extends ModuleStateManager<\n  ManageProjectRepository,\n  IProjectDefinition\n> {\n  repository: ManageProjectRepository = {\n    validationErrors: [],\n    buildStages: [\n      {\n        name: \"RunBuildCommands\",\n        displayLabel: \"Run Build Commands\",\n      },\n      {\n        name: \"CopyToStagingDirectory\",\n        displayLabel: \"Copy To Staging Directory\",\n      },\n      {\n        name: \"PublishToRepository\",\n        displayLabel: \"Publish To Repository\",\n      },\n    ],\n  } as ManageProjectRepository;\n  model: IProjectDefinition = {\n    repositoryDetail: {} as IRepositoryDetail,\n  } as IProjectDefinition;\n\n  public get projectLabel(): string {\n    return this.model.label ?? \"\";\n  }\n\n  public async saveAsync() {\n    const saveResult = await new ManageProjectApiCaller().saveAsync(this.model);\n    this.updateRepository({ validationErrors: saveResult.validationErrors });\n    if (this.inError) {\n      throw new Error(\"Unable to save project\");\n    }\n  }\n\n  public get isInitialized(): boolean {\n    return this.model.project ? true : false;\n  }\n\n  public initializeModel(projectDefinition: IProjectDefinition) {\n    if (this.isInitialized) {\n      return;\n    }\n\n    if (!projectDefinition.project) {\n      projectDefinition.project = {\n        disabledStages: [],\n        buildOutputDirectory: \"\",\n        buildCommands: [],\n        onFailurePostBuildCommands: [],\n        onSuccessPostBuildCommands: [],\n        publishUrl: \"\",\n      } as IProject;\n    }\n    debugger;\n    this.updateModel(projectDefinition);\n  }\n\n  public get inError(): boolean {\n    return this.repository.validationErrors.length > 0;\n  }\n\n  public get canSave(): boolean {\n    return this.model.label &&\n      this.model.repositoryDetail?.url &&\n      this.model.repositoryDetail?.branch\n      ? true\n      : false;\n  }\n}\n","import { PureComponent } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport ErrorDisplayer from \"./ErrorDisplayer\";\nimport { IInputFieldSupport } from \"./InputField\";\n\ninterface IProps extends IInputFieldSupport {\n  onChange: (value: string) => void;\n  value: string;\n  description?: string;\n}\nexport default class MultilineTextbox extends PureComponent<IProps> {\n  render() {\n    return (\n      <ErrorDisplayer\n        id={this.props.id}\n        validationErrors={this.props.validationErrors}\n      >\n        <Form.Group className=\"mb-3\" controlId=\"label\">\n          <Form.Label>{this.props.displayLabel}</Form.Label>\n          <textarea\n            className=\"form-control\"\n            rows={5}\n            placeholder={this.props.displayLabel}\n            value={this.props.value}\n            onChange={(e) => {\n              this.props.onChange(e.target.value);\n            }}\n          />\n          <Form.Text className=\"text-muted\">{this.props.description}</Form.Text>\n        </Form.Group>\n      </ErrorDisplayer>\n    );\n  }\n}\n","import { PureComponent, ReactNode } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport GetRouteData from \"../../BasicRouter/BasicRouterDataReader\";\nimport GundiForm from \"../../Forms/GundiForm\";\nimport PageHeader from \"../../PageHeader/UI/PageHeader\";\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\nimport ManageProjectLogic from \"../State/ManageProjectLogic\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Textbox from \"../../Forms/Textbox\";\nimport MultilineTextbox from \"../../Forms/MultilineTextbox\";\nimport Dropdown from \"../../Forms/Dropdown/Dropdown\";\nimport ReactSelectDropDownAdapter from \"../../Forms/Dropdown/ReactSelect/ReactSelectDropDownAdapter\";\nimport IBuildStage from \"../../BuildStages/Data/IBuildStage\";\n\nconst logic = new ManageProjectLogic();\nexport default class ManageProjectForm extends PureComponent {\n  componentDidMount(): void {\n    logic.setRerender(() => this.forceUpdate());\n    logic.initializeModel(GetRouteData<IProjectDefinition>());\n  }\n\n  private get buildSection(): ReactNode {\n    return (\n      <>\n        <Textbox\n          id=\"Project.BuildOutputDirectory\"\n          validationErrors={logic.repository.validationErrors}\n          displayLabel=\"Build Output Directory\"\n          value={logic.model.project.buildOutputDirectory}\n          onChange={(value) =>\n            logic.updateModel({\n              project: {\n                ...logic.model.project,\n                buildOutputDirectory: value,\n              },\n            })\n          }\n          description={\n            \"The path relative to the root of the repository to where build output shall be placed.\"\n          }\n        />\n        <MultilineTextbox\n          id=\"Project.BuildCommands\"\n          validationErrors={logic.repository.validationErrors}\n          displayLabel=\"Build Commands\"\n          value={logic.model.project.buildCommands.join(\"\\n\")}\n          onChange={(value) =>\n            logic.updateModel({\n              project: {\n                ...logic.model.project,\n                buildCommands: value.split(\"\\n\"),\n              },\n            })\n          }\n          description={\n            \"The commands to run to build the project.  Each line is a separate command.\"\n          }\n        />\n        <Dropdown\n          id=\"Project.DisabledStages\"\n          displayLabel={\"Disabled Stages\"}\n          data={logic.repository.buildStages}\n          validationErrors={logic.repository.validationErrors}\n          selected={logic.model.project.disabledStages}\n          onSelectionChanged={(data) => {\n            //logic.onProjectSelectionChanged(data as IApplicationProjectDefinition[])\n          }}\n          adapter={\n            new ReactSelectDropDownAdapter<IBuildStage>(\"displayLabel\", {\n              isMulti: true,\n              closeMenuOnSelect: false,\n            })\n          }\n        />\n        <MultilineTextbox\n          id=\"Project.OnFailurePostBuildCommands\"\n          validationErrors={logic.repository.validationErrors}\n          displayLabel=\"On Failure Post Build Commands\"\n          value={logic.model.project.onFailurePostBuildCommands\n            .map((buildCommand) => buildCommand.command)\n            .join(\"\\n\")}\n          onChange={(value) =>\n            logic.updateModel({\n              project: {\n                ...logic.model.project,\n                onFailurePostBuildCommands: value.split(\"\\n\").map((x) => {\n                  return {\n                    command: x,\n                  };\n                }),\n              },\n            })\n          }\n          description={\n            \"The commands to run after a build failure.  Each line is a separate command.\"\n          }\n        />\n        <MultilineTextbox\n          id=\"Project.OnSuccessPostBuildCommands\"\n          validationErrors={logic.repository.validationErrors}\n          displayLabel=\"On Success Post Build Commands\"\n          value={logic.model.project.onSuccessPostBuildCommands\n            .map((buildCommand) => buildCommand.command)\n            .join(\"\\n\")}\n          onChange={(value) =>\n            logic.updateModel({\n              project: {\n                ...logic.model.project,\n                onSuccessPostBuildCommands: value.split(\"\\n\").map((x) => {\n                  return {\n                    command: x,\n                  };\n                }),\n              },\n            })\n          }\n          description={\n            \"The commands to run after a successful build.  Each line is a separate command.\"\n          }\n        />\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n          <Form.Check\n            type={\"switch\"}\n            label={`Delete Local Repository After Build Success`}\n            checked={!logic.model.keepSource}\n            onChange={() =>\n              logic.updateModel({ keepSource: !logic.model.keepSource })\n            }\n          />\n        </Form.Group>\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <ToastContainer />\n        <PageHeader title={`Manage Project: ${logic.projectLabel}`} />\n\n        {!logic.isInitialized ? (\n          <>Loading...</>\n        ) : (\n          <GundiForm\n            title={logic.projectLabel}\n            description=\"Manage the settings of your Gundi Project\"\n            buttons={\n              <>\n                <Button\n                  disabled={logic.canSave === true ? false : true}\n                  onClick={() => {\n                    toast.promise(logic.saveAsync(), {\n                      pending: \"Saving Project...\",\n                      success: \"Saved\",\n                      error: \"Error saving\",\n                    });\n                  }}\n                >\n                  Save\n                </Button>{\" \"}\n              </>\n            }\n          >\n            <h3>Basic Information</h3>\n            <Textbox\n              id=\"ProjectDefinition.Label\"\n              value={logic.model.label}\n              validationErrors={logic.repository.validationErrors}\n              onChange={(value) => logic.updateModel({ label: value })}\n              displayLabel={\"Label\"}\n              description=\"The name of the project as you'd wish it displayed.\"\n            />\n\n            <h3>Source Repository</h3>\n            <Textbox\n              id=\"RepositoryDetail.Url\"\n              value={logic.model.repositoryDetail.url}\n              validationErrors={logic.repository.validationErrors}\n              onChange={(value) =>\n                logic.updateModel({\n                  repositoryDetail: {\n                    ...logic.model.repositoryDetail,\n                    url: value,\n                  },\n                })\n              }\n              displayLabel={\"Repository Url\"}\n              description=\"The git repository url for the project.\"\n            />\n            <Textbox\n              id=\"RepositoryDetail.Branch\"\n              value={logic.model.repositoryDetail.branch}\n              validationErrors={logic.repository.validationErrors}\n              onChange={(value) =>\n                logic.updateModel({\n                  repositoryDetail: {\n                    ...logic.model.repositoryDetail,\n                    branch: value,\n                  },\n                })\n              }\n              displayLabel={\"Repository Branch\"}\n              description=\"The branch to build when repository is pulled\"\n            />\n            <Textbox\n              id=\"ProjectDefinition.ProjectPath\"\n              validationErrors={logic.repository.validationErrors}\n              displayLabel=\"Project Path\"\n              value={logic.model.projectPath}\n              onChange={(value) =>\n                logic.updateModel({\n                  projectPath: value,\n                })\n              }\n              description={\n                \"The path relative to the root of the repository to where the Gundi file is located.\"\n              }\n            />\n            <h3>Build</h3>\n            {this.buildSection}\n          </GundiForm>\n        )}\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport BasicRouter from \"./BasicRouter/BasicRouter\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ProjectDefinitionsList from \"./ProjectDefinitionsList/UI/ProjectDefinitionsList\";\nimport Project from \"./Project/UI/Project\";\nimport Landing from \"./Landing/UI/Landing\";\nimport NavigationSupport from \"./Navigation/UI/NavigationSupport\";\nimport ApplicationForm from \"./ApplicationForm/UI/ApplicationForm\";\nimport ProjectDefinition from \"./ProjectDefinitions/UI/ProjectDefinition\";\nimport ManageProjectForm from \"./ManageProject/UI/ManageProjectForm\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <NavigationSupport>\n      <BasicRouter\n        routes={[\n          {\n            path: \"/\",\n            component: <Landing />,\n          },\n          {\n            path: \"/project-definitions/list\",\n            component: <ProjectDefinitionsList />,\n          },\n          {\n            path: \"/project\",\n            component: <Project />,\n          },\n          {\n            path: \"/applications/form\",\n            component: <ApplicationForm />,\n          },\n          {\n            path: \"/project-definitions/configure\",\n            component: <ProjectDefinition />,\n          },\n          {\n            path: \"/projects/manage\",\n            component: <ManageProjectForm />,\n          },\n        ]}\n        badRouteComponent={<div>Nothing here</div>}\n      />\n    </NavigationSupport>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}