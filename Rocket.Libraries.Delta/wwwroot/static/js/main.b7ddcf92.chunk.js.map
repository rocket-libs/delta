{"version":3,"sources":["BasicRouter/BasicRouter.tsx","BasicRouter/BasicRouterFunctions.ts","reportWebVitals.ts","Settings/Settings.ts","Api/ApiCaller.ts","Api/WrappedResponseApiCaller.ts","Api/ApiIntergratorBase.ts","GlobalConstants/GlobalConstants.ts","Forms/DataList/DataboundList/Databinder.ts","Api/StandardApiIntergrator.ts","ProjectDefinitionsList/Data/ProjectDefinitionsListApiIntegrator.ts","ProjectRunning/Data/ProjectDefinitionRunnerApiIntegrator.ts","ProjectDefinitionsList/Potter/ProjectDefinitionsListLogic.ts","ProjectDefinitionsList/Potter/ProjectDefinitionsListRepository.ts","ProjectDefinitionsList/UI/ProjectDefinitionsTable.tsx","Busy/BusyDialog.tsx","ProjectDefinitionsList/UI/ProjectDefinitionsList.tsx","EventStreaming/ServerEventListener.ts","Project/Potter/ProjectLogic.ts","BasicRouter/BasicRouterDataReader.ts","Project/Potter/ProjectRepository.ts","Layout/Page.tsx","Project/UI/Project.tsx","index.tsx"],"names":["pathSetterInstance","BasicRouter","props","useState","path","navigationInfo","setNavigationInfo","activeNavigationInformation","setActiveNavigationInformation","pathSetter","window","location","pathname","useEffect","basicRouter","push","navigationInformation","toLocaleLowerCase","addEventListener","_","console","error","removeEventListener","history","pushState","data","targetComponent","routes","find","candidateRoute","component","badRouteComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Settings","includes","hostname","fullEndpointUri","relativeUrl","settings","encodeURI","host","ApiCaller","this","callAsync","payload","method","fullUrl","controller","AbortController","options","signal","headers","Accept","body","JSON","stringify","undefined","setTimeout","abort","fetch","response","ok","Error","status","statusText","WrappedResponseApiCaller","apiCaller","getAsync","extractPayloadAsync","postAsync","successCode","json","responseObject","code","message","ApiIntergratorBase","apiVersion","action","basePath","wrappedResponseApiCaller","getRelativeUrl","GlobalConstants","zero","one","negativeOne","strings","firstElementIndex","arrays","emptyArrayLength","paging","nextIncrementAmount","lastDecrementAmount","zIndexes","actionBar","menuDropDown","mobileTopBar","defaultGuid","Databinder","dataset","pageableEndpoint","currentPage","pageSize","maximumPageSize","hasMorePages","page","searchEndpoint","applyPagingToSearches","debouncingSearcher","searchDebounceMilliseconds","searchText","debounce","getSearchText","onSearchAsync","onGetPage","onCompleted","a","replaceData","newData","splice","length","i","Array","isArray","StandardApiIntergrator","pagesNavigator","getOptionallyPaged","dataAdapter","endpoint","result","appendData","model","ProjectDefinitionsListApiIntegrator","ProjectDefinitionRunnerApiIntegrator","projectId","ProjectDefinitionsListLogic","runAsync","fn","context","repository","hasFetchedProjectDefinitions","fetchProjectDefinitionsAsync","projectDefinitions","potter","pushToRepository","runByIdAsync","PotterLogicBase","ProjectDefinitionsListRepository","startingUpText","PotterRepositoryBase","ProjectDefinitionsTable","Table","striped","bordered","hover","size","responsive","map","projectDefinition","index","label","Button","onClick","PotterChildComponent","BusyDialog","Modal","show","ProgressBar","animated","now","ProjectDefinitionsList","componentToShow","getChildKeyFromObject","style","width","margin","border","textAlign","paddingTop","onHide","Body","Footer","variant","logic","busy","PotterComponent","ServerEventListener","args","eventSource","EventSource","url","onmessage","event","close","onData","ProjectLogic","isRunning","state","handleEventListening","processRunningResult","errors","outputDiv","document","getElementById","scrollIntoView","behavior","block","inline","output","scrollToBottom","ProjectRepository","Page","title","children","styles","header","fontSize","fontWeight","Project","runProjectAsync","id","padding","chunk","split","line","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b7ddcf92.chunk.js","sourcesContent":["import { ReactElement, useEffect, useState } from \"react\";\nimport BasicRouterFunctions from \"./BasicRouterFunctions\";\nimport INavigationInformation from \"./INavigationInformation\";\nimport IRoute from \"./IRoute\";\n\ninterface IProps {\n  routes: IRoute[];\n  badRouteComponent: ReactElement;\n}\n\nlet pathSetterInstance: () => void;\n\ndeclare global {\n  interface Window {\n    basicRouter: BasicRouterFunctions;\n  }\n}\n\nwindow.basicRouter = window.basicRouter || new BasicRouterFunctions();\n\nexport default function BasicRouter(props: IProps): ReactElement {\n  const [navigationInfo, setNavigationInfo] = useState<INavigationInformation>({\n    path: \"/\",\n  });\n\n  const [activeNavigationInformation, setActiveNavigationInformation] =\n    useState<INavigationInformation>();\n\n  const pathSetter = () => {\n    setNavigationInfo({\n      path: window.location.pathname,\n    });\n  };\n\n  useEffect(() => {\n    window.basicRouter.push = (\n      navigationInformation: INavigationInformation\n    ) => {\n      navigationInformation.path =\n        navigationInformation.path.toLocaleLowerCase();\n      setNavigationInfo(navigationInformation);\n    };\n    pathSetterInstance = pathSetter;\n    window.addEventListener(\"popstate\", pathSetterInstance);\n\n    return function () {\n      window.basicRouter.push = (_) => {\n        console.error(\"BasicRouter push was disposed\");\n      };\n      window.removeEventListener(\"popstate\", pathSetterInstance);\n    };\n  });\n  useEffect(() => {\n    window.history.pushState(navigationInfo.data, \"\", navigationInfo.path);\n    setActiveNavigationInformation(navigationInfo);\n  }, [navigationInfo.path, navigationInfo.data, navigationInfo]);\n\n  const targetComponent = props.routes.find(\n    (candidateRoute) =>\n      candidateRoute.path.toLocaleLowerCase() === navigationInfo.path\n  ) ?? { path: \"/404\", component: props.badRouteComponent };\n\n  const readyToRender = activeNavigationInformation === navigationInfo;\n  if (readyToRender) {\n    return (\n      <div key={activeNavigationInformation?.path}>\n        {targetComponent.component}\n      </div>\n    );\n  } else {\n    return <>...</>;\n  }\n}\n","import INavigationInformation from \"./INavigationInformation\";\nexport default class BasicRouterFunctions {\n  public push: (navigationInformation: INavigationInformation) => void = (_) =>\n    console.error(\"Push not yet initialized\");\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nexport default class Settings {\n  \n  get host(): string{\n    const localhosts = ['localhost', '127.0.0.1'];\n    if(!localhosts.includes(window.location.hostname.toLocaleLowerCase())){\n      return \"\";\n    }else{\n      return \"http://localhost:5002/\" \n    }\n    \n  }\n}\n","import Settings from \"../Settings/Settings\";\n\nconst apiTimeoutMilliseconds = 1000 * 60 * 5;\n\nexport const fullEndpointUri = (relativeUrl: string): string => {\n  const settings = new Settings();\n  return encodeURI(`${settings.host}api/${relativeUrl}`);\n};\n\nexport default class ApiCaller {\n  public async getAsync(relativeUrl: string): Promise<Response> {\n    return await this.callAsync(relativeUrl, \"GET\");\n  }\n\n  public async postAsync(\n    relativeUrl: string,\n    payload: object\n  ): Promise<Response> {\n    return await this.callAsync(relativeUrl, \"POST\", payload);\n  }\n  private async callAsync(\n    relativeUrl: string,\n    method: string,\n    payload?: object\n  ): Promise<Response> {\n    const fullUrl = fullEndpointUri(relativeUrl);\n    const controller = new AbortController();\n\n    const options = {\n      method: method,\n      signal: controller.signal,\n      headers: {\n        Accept: \"application/json\",\n        \"Accept-Encoding\": \"gzip\",\n        \"Content-Type\": \"application/json;charset=UTF-8\",\n      },\n      body: payload ? JSON.stringify(payload) : undefined,\n    };\n\n    setTimeout(() => controller.abort(), apiTimeoutMilliseconds);\n    const response = await fetch(fullUrl, options);\n    if (response.ok) {\n      return response;\n    } else {\n      throw new Error(\n        `Error calling api '${fullUrl}'\\n HTTP Status Code: '${response.status}' Status Text '${response.statusText}'`\n      );\n    }\n  }\n}\n","import IWrappedResponse from \"./IWrappedResponse\";\nimport ApiCaller from \"./ApiCaller\";\n\nexport default class WrappedResponseApiCaller {\n  public async getAsync<TPayload>(relativeUrl: string): Promise<TPayload> {\n    const apiCaller = new ApiCaller();\n    const response = await apiCaller.getAsync(relativeUrl);\n    return await this.extractPayloadAsync(response);\n  }\n\n  public async postAsync<TPayload>(\n    relativeUrl: string,\n    payload: object\n  ): Promise<TPayload> {\n    const apiCaller = new ApiCaller();\n    const response = await apiCaller.postAsync(relativeUrl, payload);\n    return await this.extractPayloadAsync(response);\n  }\n\n  private async extractPayloadAsync<TPayload>(\n    response: Response\n  ): Promise<TPayload> {\n    const successCode = 1;\n    const responseObject =\n      (await response.json()) as IWrappedResponse<TPayload>;\n    if (responseObject.code === successCode) {\n      return responseObject.payload;\n    } else {\n      throw new Error(\"API call error: \" + responseObject.message);\n    }\n  }\n}\n","import WrappedResponseApiCaller from \"./WrappedResponseApiCaller\";\n\nexport default abstract class ApiIntergratorBase {\n  protected apiVersion: \"v0\" | \"v1\" = \"v1\";\n\n  protected get wrappedResponseApiCaller(): WrappedResponseApiCaller {\n    return new WrappedResponseApiCaller();\n  }\n\n  protected abstract get basePath(): string;\n\n  private getRelativeUrl(action: string): string {\n    return `${this.apiVersion}/${this.basePath}/${action}`;\n  }\n\n  protected async getAsync<TResult>(action: string): Promise<TResult> {\n    return await this.wrappedResponseApiCaller.getAsync<TResult>(\n      this.getRelativeUrl(action)\n    );\n  }\n\n  protected async postAsync<TResult>(\n    action: string,\n    payload: any\n  ): Promise<TResult> {\n    return await this.wrappedResponseApiCaller.postAsync(\n      this.getRelativeUrl(action),\n      payload\n    );\n  }\n}\n","const GlobalConstants = {\n    zero: 0,\n    one: 1,\n    negativeOne: -1,\n    strings: {\n        firstElementIndex: 0,\n    },\n    arrays: {\n        emptyArrayLength: 0,\n        firstElementIndex: 0,\n    },\n    paging: {\n        nextIncrementAmount: 1,\n        lastDecrementAmount: -1,\n    },\n    zIndexes: {\n        actionBar: 2,\n        menuDropDown: () => GlobalConstants.zIndexes.actionBar + GlobalConstants.one,\n        mobileTopBar: () => GlobalConstants.zIndexes.menuDropDown() + GlobalConstants.one,\n    },\n    defaultGuid: \"00000000-0000-0000-0000-000000000000\",\n};\n\nexport default GlobalConstants;\n","import GlobalConstants from \"../../../GlobalConstants/GlobalConstants\";\nimport { debounce } from \"throttle-debounce\";\n\nconst maximumPageSize: number = 65535;\nconst defaultSearchDebounceMilliseconds: number = 500;\nexport default class Databinder<TData> {\n  public maximumPageSize: number = maximumPageSize;\n  public pageSize: number = this.maximumPageSize;\n  public hasMorePages: boolean = true;\n  public page: number = GlobalConstants.one;\n  public dataset: TData[];\n  public pageableEndpoint: string;\n  public searchEndpoint: string = \"search\";\n  public applyPagingToSearches: boolean = true;\n  private debouncingSearcher: (\n    getSearchText: () => string,\n    onSearchAsync: () => Promise<void>,\n    onGetPage: () => void,\n    onCompleted: (resultset: TData[]) => void\n  ) => void;\n  public searchDebounceMilliseconds: number = defaultSearchDebounceMilliseconds;\n  public searchText: string = \"\";\n\n  constructor(\n    dataset: TData[],\n    pageableEndpoint?: string,\n    currentPage?: number,\n    pageSize?: number\n  ) {\n    this.page = currentPage ?? this.page;\n    this.pageSize = pageSize ?? this.pageSize;\n    this.dataset = dataset;\n    this.pageableEndpoint = pageableEndpoint ?? \"get-pageable\";\n    this.debouncingSearcher = debounce(\n      this.searchDebounceMilliseconds,\n      false,\n      async (\n        getSearchText: () => string,\n        onSearchAsync: () => Promise<void>,\n        onGetPage: () => void,\n        onCompleted: (resultset: TData[]) => void\n      ) => {\n        if (getSearchText()) {\n          this.hasMorePages = false;\n          await onSearchAsync();\n          onCompleted(this.dataset);\n        } else {\n          this.hasMorePages = true;\n          onCompleted([]);\n          this.replaceData([]);\n          this.page = GlobalConstants.one;\n          onGetPage();\n        }\n      }\n    );\n  }\n\n  public replaceData(newData: TData[]) {\n    this.dataset.splice(GlobalConstants.zero, this.dataset.length);\n    for (let i = 0; i < newData.length; i++) {\n      this.dataset.push(newData[i]);\n    }\n  }\n\n  public search(\n    searchText: string,\n    onSearchAsync: () => Promise<void>,\n    onGetPage: () => void,\n    onCompleted: (resultset: TData[]) => void\n  ) {\n    this.searchText = searchText;\n    this.debouncingSearcher(\n      () => this.searchText,\n      onSearchAsync,\n      onGetPage,\n      onCompleted\n    );\n  }\n\n  public appendData(newData: TData[]) {\n    const receivedValidData = newData && Array.isArray(newData);\n    if (receivedValidData) {\n      this.hasMorePages = newData.length === this.pageSize;\n      this.page += 1;\n      for (let i = 0; i < newData.length; i++) {\n        this.dataset.push(newData[i]);\n      }\n    }\n  }\n}\n","import ApiIntergratorBase from \"./ApiIntergratorBase\";\nimport ValidationResponse from \"./ValidationResponse\";\nimport Databinder from \"../Forms/DataList/DataboundList/Databinder\";\n\nexport default abstract class StandardApiIntergrator<\n  TModel\n> extends ApiIntergratorBase {\n  public async getPaged(pagesNavigator: Databinder<TModel>) {\n    await this.getOptionallyPaged(pagesNavigator);\n  }\n\n  public async searchAsync(dataAdapter: Databinder<TModel>): Promise<TModel[]> {\n    const endpoint = dataAdapter.searchEndpoint ?? \"search\";\n    dataAdapter = dataAdapter ?? new Databinder<TModel>([]);\n    let relativeUrl = `${endpoint}?searchText=${dataAdapter.searchText}`;\n    if (dataAdapter.applyPagingToSearches) {\n      relativeUrl += `&page=${dataAdapter.page}&pageSize=${dataAdapter.pageSize}`;\n    }\n    const result = await this.getAsync<TModel[]>(relativeUrl);\n    dataAdapter.replaceData(result);\n    return result;\n  }\n\n  public async getOptionallyPaged(\n    dataAdapter?: Databinder<TModel>\n  ): Promise<TModel[]> {\n    const shouldMakeCall = !dataAdapter || dataAdapter.hasMorePages;\n    if (shouldMakeCall) {\n      const endpoint = dataAdapter?.pageableEndpoint ?? \"get-pageable\";\n      dataAdapter = dataAdapter ?? new Databinder<TModel>([]);\n      const result = await this.getAsync<TModel[]>(\n        `${endpoint}?page=${dataAdapter.page}&pageSize=${dataAdapter.pageSize}`\n      );\n      dataAdapter.appendData(result);\n      return result;\n    } else {\n      return [];\n    }\n  }\n\n  public async insertAsync(model: TModel): Promise<ValidationResponse<TModel>> {\n    return await this.postAsync(\"insert\", model);\n  }\n}\n","import StandardApiIntergrator from \"../../Api/StandardApiIntergrator\";\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\n\nexport default class ProjectDefinitionsListApiIntegrator extends StandardApiIntergrator<IProjectDefinition> {\n  basePath: string = \"ProjectDefinitions\";\n}\n","import StandardApiIntergrator from \"../../Api/StandardApiIntergrator\";\nimport IProcessRunningResult from \"../../Project/Data/IProcessRunningResult\";\nexport default class ProjectDefinitionRunnerApiIntegrator extends StandardApiIntergrator<object> {\n  basePath: string = \"Run\";\n\n  \n\n  public async runByIdAsync(\n    projectId: string\n  ): Promise<IProcessRunningResult[]> {\n    \n    const result = await this.getAsync<IProcessRunningResult[]>(\n      `run-by-id?projectId=${projectId}`\n    );\n    return result;\n  }\n\n  \n}\n","import { PotterLogicBase } from \"react-potter\";\nimport ProjectDefinitionsListRepository from \"./ProjectDefinitionsListRepository\";\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\nimport ProjectDefinitionsListApiIntegrator from \"../Data/ProjectDefinitionsListApiIntegrator\";\nimport Databinder from \"../../Forms/DataList/DataboundList/Databinder\";\nimport ProjectDefinitionRunnerApiIntegrator from \"../../ProjectRunning/Data/ProjectDefinitionRunnerApiIntegrator\";\n\nexport default class ProjectDefinitionsListLogic extends PotterLogicBase<\n  ProjectDefinitionsListRepository,\n  IProjectDefinition\n> {\n  private dataAdapter = new Databinder<IProjectDefinition>([], \"get-all\");\n  public async fetchProjectDefinitionsAsync() {\n    const projectDefinitions = await this.runAsync({\n      fn: async () => {\n        try{\n        const result = await new ProjectDefinitionsListApiIntegrator().getOptionallyPaged(\n          this.dataAdapter\n        );\n        this.context.repository.hasFetchedProjectDefinitions = true;\n        return result;\n        }\n        catch(e){\n          console.error(e);\n          setTimeout(async () => {\n            await this.fetchProjectDefinitionsAsync();\n          }, 2000);\n          return [];\n        }  \n      },\n    });\n    this.potter.pushToRepository({ projectDefinitions: projectDefinitions });\n  }\n\n  \n\n  public async runProjectAsync(projectId: string) {\n    const succeeded = await this.runAsync({\n      fn: async () => {\n        return await new ProjectDefinitionRunnerApiIntegrator().runByIdAsync(\n          projectId\n        );\n      },\n    });\n\n    if (succeeded) {\n      this.potter.pushToRepository({ message: \"Completed successfully\" });\n    } else {\n      this.potter.pushToRepository({\n        message: \"Unable to complete running of project\",\n      });\n    }\n  }\n}\n","import { PotterRepositoryBase } from \"react-potter\";\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\nexport default class ProjectDefinitionsListRepository extends PotterRepositoryBase {\n  projectDefinitions: IProjectDefinition[] = [];\n  message: string = \"\";\n  hasFetchedProjectDefinitions: boolean = false;\n  startingUpText: string = \"Gundi is starting up. Please wait...\";\n}\n","import { ReactElement } from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { PotterChildComponent } from \"react-potter\";\nimport { IPotterChildComponentProps } from \"react-potter/build/components/PotterChildComponent\";\n\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\nimport ProjectDefinitionsListLogic from \"../Potter/ProjectDefinitionsListLogic\";\nimport ProjectDefinitionsListRepository from \"../Potter/ProjectDefinitionsListRepository\";\n\n\ninterface IProps\n  extends IPotterChildComponentProps<\n    ProjectDefinitionsListRepository,\n    object,\n    ProjectDefinitionsListLogic\n  > {}\n\nexport default class ProjectDefinitionsTable extends PotterChildComponent<\n  ProjectDefinitionsListRepository,\n  object,\n  ProjectDefinitionsListLogic,\n  IProps\n> {\n  onRender(): ReactElement {\n    return (\n      <Table striped bordered hover size=\"sm\" responsive>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Project</th>\n            <th>Action</th>\n          </tr>\n          {this.repository.projectDefinitions.map(\n            (projectDefinition: IProjectDefinition, index: number) => {\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{projectDefinition.label}</td>\n                  <td>\n                    <Button\n                      onClick={() => {\n                        window.basicRouter.push({\n                          path: \"/project\",\n                          data: projectDefinition,\n                        });\n                      }}\n                    >\n                      Run\n                    </Button>\n                  </td>\n                </tr>\n              );\n            }\n          )}\n        </thead>\n      </Table>\n    );\n  }\n}\n","import { Modal, ProgressBar } from \"react-bootstrap\";\n\ninterface IProps {\n  show: boolean;\n}\nexport default function BusyDialog(props: IProps) {\n  return (\n    <Modal show={props.show}>\n      <ProgressBar animated now={100} />\n    </Modal>\n  );\n}\n","import { ReactElement } from \"react\";\nimport { PotterComponent } from \"react-potter\";\nimport ProjectDefinitionsListLogic from \"../Potter/ProjectDefinitionsListLogic\";\nimport ProjectDefinitionsListRepository from \"../Potter/ProjectDefinitionsListRepository\";\nimport ProjectDefinitionsTable from \"./ProjectDefinitionsTable\";\nimport BusyDialog from \"../../Busy/BusyDialog\";\nimport { Modal, Button } from \"react-bootstrap\";\n\n\ninterface IProps {}\n\nexport default class ProjectDefinitionsList extends PotterComponent<\n  ProjectDefinitionsListRepository,\n  object,\n  ProjectDefinitionsListLogic,\n  IProps\n> {\n  constructor() {\n    super(\n      new ProjectDefinitionsListRepository(),\n      {},\n      new ProjectDefinitionsListLogic()\n    );\n  }\n\n  message(): ReactElement {\n    return (\n      <Modal\n        show={this.repository.message ? true : false}\n        onHide={() => this.potter.pushToRepository({ message: \"\" })}\n      >\n        <Modal.Body>{this.repository.message}</Modal.Body>\n        <Modal.Footer>\n          <Button\n            variant=\"secondary\"\n            onClick={() => this.potter.pushToRepository({ message: \"\" })}\n          >\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n\n  async componentDidMount() {\n    await this.logic.fetchProjectDefinitionsAsync();\n  }\n\n  componentToShow = () : ReactElement => {\n    if(this.repository.hasFetchedProjectDefinitions) {\n      return <ProjectDefinitionsTable\n      potter={this.potter}\n      key={this.getChildKeyFromObject(this.repository.projectDefinitions)}\n    />\n    }else\n    {\n        return <div style={{width:\"100%\",margin:\"auto\", border:\"solid 1px #DFDFDF\",textAlign:\"center\",paddingTop:\"50px\"}}>{this.repository.startingUpText}</div>\n    }\n  }\n\n  onRender(): ReactElement {\n    return (\n      <>\n        <BusyDialog show={this.repository.busy} />\n        {this.componentToShow()}\n      </>\n    );\n  }\n\n  async onStartedAsync() {\n    \n  }\n}\n","export default class ServerEventListener{\n    eventSource: EventSource;\n    constructor(args: {  url: string, onData: (data: string) => void, onCompleted: () => void}){\n        this.eventSource = new EventSource(args.url);\n        this.eventSource.onmessage = (event) => {\n            if(event.data === \"---terminate---\" && this.eventSource){\n                this.eventSource.close();\n                this.eventSource.onmessage = null;\n                args.onCompleted();\n            }else{\n                args.onData(event.data);\n            }\n        }\n    }\n}","import { PotterLogicBase } from \"react-potter\";\nimport GetRouteData from \"../../BasicRouter/BasicRouterDataReader\";\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\nimport ProjectDefinitionRunnerApiIntegrator from \"../../ProjectRunning/Data/ProjectDefinitionRunnerApiIntegrator\";\nimport IProcessRunningResult from \"../Data/IProcessRunningResult\";\nimport ProjectRepository from \"./ProjectRepository\";\nimport ServerEventListener from \"../../EventStreaming/ServerEventListener\";\nimport Settings from \"../../Settings/Settings\";\nexport default class ProjectLogic extends PotterLogicBase<\n  ProjectRepository,\n  IProjectDefinition\n> {\n\n  private isRunning: boolean = false;\n\n  public get projectDefinition(): IProjectDefinition {\n    return GetRouteData<IProjectDefinition>();\n  }\n\n\n  public async runProjectAsync() {\n      try{\n          if(this.isRunning){\n            return;\n          }\n          this.potter.pushToRepository({busy:true});\n          this.handleEventListening();\n          this.isRunning = true;\n          const result =\n          await new ProjectDefinitionRunnerApiIntegrator().runByIdAsync(\n            this.projectDefinition.projectId\n          );\n          \n        this.potter.pushToRepository({ processRunningResult: result });\n      }catch(e){\n        console.error(e);\n        const result = {\n          errors: [\"Error occured on server\"],\n        } as IProcessRunningResult;\n        this.potter.pushToRepository({ processRunningResult: [result] });\n      }finally{\n        this.isRunning = false;\n      }\n  }\n\n  private scrollToBottom(){\n    const outputDiv = document.getElementById(\"gundi-output\");\n    if(outputDiv){\n    outputDiv.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"});\n    }\n  }\n\n  private handleEventListening(){\n    new ServerEventListener(\n      {\n        url: `${new Settings().host}api/v1/EventQueue/listen?projectId=${this.projectDefinition.projectId}`,\n        onData: (data: string) => {\n          this.context.repository.output.push(data);\n          this.potter.pushToRepository({});\n          this.scrollToBottom();\n        },\n        onCompleted: () => {\n          this.potter.pushToRepository({busy:false});\n          this.scrollToBottom();\n        }\n      }\n    )\n  }\n}\n","export default function GetRouteData<TState>(): TState {\n  return window.history.state as TState;\n}\n","import { PotterRepositoryBase } from \"react-potter\";\nimport IProcessRunningResult from \"../Data/IProcessRunningResult\";\n\nexport default class ProjectRepository extends PotterRepositoryBase {\n  processRunningResult: IProcessRunningResult[] = [];\n  output: string[] = [];\n}\n","import { ReactElement, ReactNode } from \"react\";\nimport BusyDialog from \"../Busy/BusyDialog\";\ninterface IProps {\n  title: string;\n  busy: boolean;\n  children: ReactNode;\n}\nexport default function Page(props: IProps): ReactElement {\n  document.title = props.title;\n  return (\n    <>\n      <BusyDialog show={props.busy} />\n      {props.children}\n    </>\n  );\n}\n","import { PotterComponent } from \"react-potter\";\nimport ProjectLogic from \"../Potter/ProjectLogic\";\nimport ProjectRepository from \"../Potter/ProjectRepository\";\nimport IProjectDefinition from \"../../ProjectDefinitions/Data/IProjectDefinition\";\nimport { ReactElement } from \"react\";\nimport Page from \"../../Layout/Page\";\n\nconst styles = {\n  header: {\n    fontSize: \"25px\",\n    fontWeight: \"bold\",\n  },\n};\n\nexport default class Project extends PotterComponent<\n  ProjectRepository,\n  IProjectDefinition,\n  ProjectLogic,\n  any\n> {\n  constructor() {\n    super(\n      new ProjectRepository(),\n      {} as IProjectDefinition,\n      new ProjectLogic()\n    );\n  }\n\n  async componentDidMount() {\n    await this.logic.runProjectAsync(); \n  }\n\n  onRender(): ReactElement {\n    return (\n      <Page\n        title={this.logic.projectDefinition.label}\n        busy={this.repository.busy}\n      >\n        <div style={styles.header}>{this.logic.projectDefinition.label}</div>\n        <hr />\n        <div id=\"gundi-output\" style={{padding:\"10px\", margin:\"4px\", border:\"solid 1px #DFDFDF\"}}>\n        <ol>\n          {this.repository.output.map((chunk) => {\n            const lines = chunk.split(\"<br/>\")\n            return lines.map((line, index) => {\n              if(line){\n              return <li key={index}>{line}</li>\n            }else{\n              return <></>\n            }});\n          })}\n        </ol>\n        </div>\n      </Page>\n    );\n  }\n\n  async onStartedAsync() {\n   \n    \n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport BasicRouter from \"./BasicRouter/BasicRouter\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ProjectDefinitionsList from \"./ProjectDefinitionsList/UI/ProjectDefinitionsList\";\nimport Project from \"./Project/UI/Project\";\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BasicRouter\n      routes={[\n        {\n          path: \"/\",\n          component: <ProjectDefinitionsList />,\n        },\n        {\n          path: \"/project\",\n          component: <Project />,\n        },\n      ]}\n      badRouteComponent={<div>Nothing here</div>}\n    />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}